---
layout: post
title: Human Being Virtual Machine
---
h1. {{ page.title }}

bq. Основная сложность при проектировании параллельных программ — обеспечить правильную последовательность взаимодействий между различными вычислительными процессами, а также координацию ресурсов, разделяемых между процессами

Смотря очередной фильм про коктейль из “военных профессионалов-убийц”[1], собранных со всего мира чтобы участвовать в интересной игре, я поначалу недоумевал. Ведь каждому должно быть ясно, что лучший в мире спецназ во взаимодействии, а не только в высоком уровне подготовки каждой его единицы. Что только понимание, что ты в команде с людьми, которых можно назвать братьями, с кем ты пойдешь в разведку, кого ты знаешь лучше себя, за счёт системы, дисциплины и сыгранности, только пройдя совместно кучу препятствий от огня до медных труб, только за счёт Команды ты делаешься смертельно опасным профессионалом и проявляешь все твои способности на максимум?[2]

Представим себе Human Being Virtual Machine (далее HBVM). Класс задач, который она будет решать - это создание другим систем. Ясно, что если это не особенный экземпляр, не исключительный гений, то работать в одиночку он не сможет.

Не совсем виртуальная машина, строго говоря. Но система, в которой выполняются некие алгоритмы по строго определенному набору инструкций, исключающих особенности реализации конкретного human being.
И построим на основе этих машин целый кластер. Существующий за счет ресурсов какой-нибудь высокопроизводительной масштабируемой инфраструктуры в современном дата-центре. 

В отличие от реального мира, где производительность такой получившийся системы легко измеряется, здесь она более размыта за счёт нестабильной низкоуровневой природы host-машин, на которых крутится наша виртуальная машина. Все человеческие существа идут с завода плохо настроенными механизмами.[3]

Возьмем чистый immutable, pure functional алгоритм. В идеальных условиях мы можем посчитать время за которое он будет выполнен. В условиях CLR или JVM это сделать на порядок сложнее из-за зависимостей от параметров физического оборудования и конкурентной среды. И это несмотря на то, что мы исключили влияния грязных побочных эффектов - вроде чтения с диска или выполнения запросов по http. HBVM же - это такая штука, которая выполняет алгоритмы, используя человеческие возможности, а это значит недетерминированное время исполнения, количество ошибок и конечный результат. Даже если алогоритм, записанный на русском языке звучит как “сложить два плюс два”.


h2. Scale

1. Горизонтальное масштабирование - возможность горячего включения ноды в кластер и перераспределение нагрузки. Зависит от лоадбалансера и архитектуры системы, для этого каждые задачи должны быть независимы от реализации виртуальной машины (человека). Пример, необходимо срочно завершить релиз к определенному сроку, достаточно направить на проект +30% мощностей.

2. Асинхронность и неблокируемость. Запросы не должны блокировать более одного участника процесса и должны быть разбиты на итерации (такты, циклы) с возможностью переключения на другие процессы. Используйте каллбэки.

3. Вертикальное масштабирование. Повышение уровня знаний, увеличение мощностей любого узла должно отражаться на общей производительности кластера. Для этого нужно правильно перераспределять задачи так, чтобы нагружать конкретную HBVM более правильно.  

4. Распределение задач по функциям (модель актеров). Если физически человек А более заточен для выполнения определенного набора задач, он должен получать по ним приоритет, даже если задачи долговременные и не укладываются в одну итерацию.

5. Уменьшение избыточности протокола взаимодействия. Для этого существуют специальные люди - аналитики. Когда тётя А формулирует задачу, она может не знать и 10% деталей реализации. Её идею раскрывает бизнес-аналитик, исследователь или любой другой методолог этих процессов. Формализатор. 

6. Инкапсуляция процесса. На уровень выше, чем  HBVM существует ещё один слой абстракции, который и доступен как внешний интерфейс для любого заказчика. В данном случае это аналог SaaS или PaaS, в зависимости от команды, но так же как в облачных технологиях недоступно железно на физическом уровне, так и каждый конкретный HBVM недоступен в рамках общей платформы.

h2. Health 

За параметрами этой системы и её инфраструктурой - как сетевыми взаимодействиями, так и каждой ноды в отдельности - мониторит куча вспомогательных систем. Например, за мотивацией следит отдел HR. 

Важно иметь правильно настроенную систему мониторинга, которая позволяет вовремя и заранее распозновать сбои, делать правильный лоад балансинг, включать в систему новые ноды, на поиск которых может потребоваться время и следить за апгрейдом. 

Хороший системный администрато - это тот человек, которого мы все любим. Но плюсы нашего HBVM-кластера в том, что его ценность здесь в способности быть полностью незавимым от задач. Он нужен для поддержания инфраструктуры и он лишь роль, которую исполняет тот же project manager.

h2. Cost

Стоимость содержания такой системы оправдана, если объемы её использования в десять раз превышают объем, максимально обрабатываемый одной среднестатистической человеческой единицой. 

Повсюду тенденция делать вычисления в облаках, в сервисах вроде Amazon Web Serivces, где цены действительно адекватны на средних и больших масштабах (от Dropbox до Heroku). 

h2. И что

Ничего неочевидного, но как часть системы HBVM не самая удобная штука. Зато они такие приятные, дружелюбные и у некоторых из них есть душа.


<hr/>

fn1. Predators (2010)

fn2. Сцена с якудза - охуительна чуть более, чем полностью. 

fn3. На самом деле незамутненность и чистота наоборот крайне быстро теряются со временем.